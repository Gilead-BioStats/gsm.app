% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aaa-shared.R
\name{shared-params}
\alias{shared-params}
\title{Parameters used in multiple functions}
\arguments{
\item{chrAllowedFields}{\code{character} A vector of names of allowed fields in an
object.}

\item{chrAllowedValues}{\code{character} A vector of allowed values for a vector.}

\item{chrChoices}{\code{character} A (named, optionally) vector of choices for a
\code{\link[shiny:selectInput]{shiny::selectInput()}} or similar input function.}

\item{chrDomains}{\code{character} A (named) vector of domains to include in the
app. The values of the vector will be used as labels, and the names will be
used as IDs. The IDs will be passed to \code{fnFetchData()} to fetch data about
that domain.}

\item{chrFromTabs}{\code{character} A vector of tab names. Syncing is only
triggered if the user is currently on one of these tabs.}

\item{chrInputNamesPretty}{\code{character} A vector of names to display for
missing inputs.}

\item{chrLinkIDs}{\code{character} Module ids for multiple modules.}

\item{chrLabels}{\code{character} A vector of labels for display to the user.}

\item{chrMessage}{\code{character} A vector of message elements to be formatted
via \code{\link[cli:cli_bullets]{cli::cli_bullets()}}.}

\item{chrMetrics}{\code{character} A named vector of MetricIDs, where the names
are the full Metric.}

\item{chrPluginFiles}{\code{character} The files in a plugin directory.}

\item{chrRequiredColumns}{\code{character} A vector of expected columns in a
data.frame.}

\item{chrRequiredFields}{\code{character} A vector of names of required fields in
an object.}

\item{chrRequiredInputs}{\code{character} An optional vector of any inputs
("metric", "group", "group level", "participant", or "domain") that must
have a non-empty value before the plugin can load. "None" and "All" count
as "empty" for this check. If the user has not set a value for that input,
the app will display a placeholder instructing the user to make a
selection.}

\item{chrGroups}{\code{character} A vector of groups available in the study.}

\item{chrValues}{\code{character} A vector of values to associate with a vector of
labels.}

\item{dfAnalyticsInput}{\code{data.frame} Participant-level metric data.}

\item{dfBounds}{\code{data.frame} Set of predicted percentages/rates and upper-
and lower-bounds across the full range of sample sizes/total exposure
values for reporting.}

\item{dfGroups}{\code{data.frame} Group-level metadata dictionary.}

\item{dfMetrics}{\code{data.frame} Metric-specific metadata for use in charts and
reporting.}

\item{dfParticipantGroups}{\code{data.frame} Unique \code{SubjectID} and \code{GroupID}
combos from \code{dfAnalyticsInput}.}

\item{dfResults}{\code{data.frame} A stacked summary of analysis pipeline output.}

\item{dfSubjectGroups}{\code{data.frame} A subset of \code{dfGroups} with \code{GroupLevel},
\code{GroupID}, and \code{SubjectID}.}

\item{dSnapshotDate}{\code{Date} The date of a data snapshot.}

\item{envCall}{\code{environment} The environment from which this function was
called, for use in better error messages. This value should usually be left
as the default, or passed from the calling function if the calling function
also has an \code{envCall} argument.}

\item{envEvaluate}{\code{environment} The environment in which any variables used
in the message or widget are defined. You almost definitely want to leave
this as the default value.}

\item{fnCountData}{\code{function} A function that takes a \code{strDomainID} argument
and optional \code{strGroupID}, \code{strGroupLevel}, \code{strSubjectID}, and/or
\code{dSnapshotDate}, and returns an integer count of the number of rows in that
filtered domain. By default, this function is constucted using
\code{fnFetchData()} and \code{\link[=ConstructDataCounter]{ConstructDataCounter()}}.}

\item{fnFetchData}{\code{function} A function that takes a \code{strDomainID} argument
and optional \code{strGroupID}, \code{strGroupLevel}, \code{strSubjectID}, and/or
\code{dSnapshotDate}, and returns a data.frame. See \code{\link[=sample_fnFetchData]{sample_fnFetchData()}} for
an example. The returned data.frame contains information about the named
domain. If the function throws an error, the error is elevated to the user,
so you can use errors to pass requirements through to the user.}

\item{fnHtmlDependency}{\code{function} A function that returns an
\code{\link[htmltools:htmlDependency]{htmltools::htmlDependency()}} or multiple wrapped in \code{\link[shiny:reexports]{shiny::tagList()}}.}

\item{fnServer}{\code{function} A Shiny server function that takes arguments
\code{input}, \code{output}, and \code{session}. This function will be called at the start
of the main app server function.}

\item{fnShinyUI}{\verb{function or character} A shiny module UI function for the
plugin, or the name of such a function in the current session.}

\item{fnShinyServer}{\verb{function or character} A shiny module server function
for the plugin, or the name of such a function in the current session.}

\item{fnWidgetOutput}{\code{function} An \code{\link[htmlwidgets:htmlwidgets-shiny]{htmlwidgets::shinyWidgetOutput()}}
function.}

\item{id}{\code{character} The id for this element.}

\item{intKRIColorCount}{\code{integer} A named vector of counts by color.}

\item{intRed}{\code{integer} The number of groups with at least one red flag.}

\item{intAmber}{\code{integer} The number of groups with at least one amber flag.}

\item{lDataModel}{\code{list} Named list of the standard gsm dataframes
(\code{dfAnalyticsInput}, \code{dfBounds}, \code{dfGroups}, \code{dfMetrics}, and \code{dfResults}).}

\item{lGroups}{\code{list} Named list of character vectors, in which the names are
the group levels and the vectors are the group IDs within that group level.}

\item{lMetric}{\code{list} Named list of data describing a single metric, as well
as things like which group is selected.}

\item{l_rctvDomains}{\code{list} A named list of lists of \code{\link[shiny:reactive]{shiny::reactive()}}
objects. Each list contains a "Study" element, a "Group" element, and a
"Selection" element, each of which returns a domain dataframe.}

\item{l_rctvDomainLoaded}{\code{list} A named list of \code{\link[shiny:reactive]{shiny::reactive()}} objects.
The list contains a "Study" element and an element per group level, each
of which returns a \code{logical} (\code{FALSE} if the data has not been accessed,
\code{TRUE} if it has).}

\item{l_rctvDomainsLoaded}{\code{list} A named list of lists of
\code{\link[shiny:reactive]{shiny::reactive()}} objects. Each list contains a "Study" element and an
element per group level, each of which returns a \code{logical} (\code{FALSE} if the
data has not been accessed, \code{TRUE} if it has).}

\item{l_rctvDomains_Selection}{\code{list} A named list of \code{\link[shiny:reactive]{shiny::reactive()}}
objects, each of which returns a domain dataframe for the current filter.}

\item{l_rctvDomainHashes}{\code{list} A named list of \code{\link[shiny:reactive]{shiny::reactive()}} objects,
each of which returns the \code{\link[rlang:hash]{rlang::hash()}} of a domain dataframe.}

\item{l_rctvInputs}{\code{list} A named list of \code{\link[shiny:reactiveVal]{shiny::reactiveVal()}} objects,
each of which returns the current value of an input or input-like variable.}

\item{lPlugin}{\code{list} A named list with required elements \code{meta} and \code{shiny},
and optional fields \code{spec}, \code{packages} and \code{required_inputs}. Usually
generated by \code{\link[=plugin_Read]{plugin_Read()}}.}

\item{lPlugins}{\code{list} Optional list of plugins to include in the app.}

\item{lSpec}{\code{list} A named list defining the data domains required by the
plugin, where the names are the names of the domains and the elements are
column definitions.}

\item{lStudy}{\code{list} Named list of data describing the overall study.}

\item{lWorkflows}{\code{list} An optional named list of workflows to run in order
to translate app domain data into the format required by the plugin (as
defined in the plugin \code{spec}). These workflows are ran before the plugin's
\code{spec} is applied, and are meant to serve as a bridge between your domain
data and the plugin's expected domains.}

\item{rctv_bPluginReady}{\verb{reactive Boolean} A \code{\link[shiny:reactive]{shiny::reactive()}} object that
returns \code{TRUE} if all inputs required by the plugin are non-empty, and
\code{FALSE} if one or more inputs are not ready.}

\item{rctv_dSnapshotDate}{\verb{reactive Date} A \code{\link[shiny:reactive]{shiny::reactive()}} object that
returns the date of a data snapshot.}

\item{rctv_dfBounds}{\verb{reactive dataframe} A \code{\link[shiny:reactive]{shiny::reactive()}} object that
returns a set of predicted percentages/rates and upper- and lower-bounds
across the full range of sample sizes/total exposure values for reporting.}

\item{rctv_dfData}{\verb{reactive dataframe} A \code{\link[shiny:reactive]{shiny::reactive()}} object that
returns a generic dataframe.}

\item{rctv_dfDomain}{\verb{reactive dataframe} A \code{\link[shiny:reactive]{shiny::reactive()}} object that
returns a domain dataframe.}

\item{rctv_dfResults}{\verb{reactive dataframe} A \code{\link[shiny:reactive]{shiny::reactive()}} object that
returns a stacked summary of analysis pipeline output.}

\item{rctv_gtObject}{\verb{reactive gt_table} A \code{\link[shiny:reactive]{shiny::reactive()}} object that
returns a \code{\link[gt:gt]{gt::gt()}} object.}

\item{rctv_intDomainCounts}{\verb{reactive integer} A \code{\link[shiny:reactive]{shiny::reactive()}} object
that returns the count of rows for the current selection for all domains.}

\item{rctv_lColumnNames}{\verb{reactive list} A \code{\link[shiny:reactive]{shiny::reactive()}} object that
returns a named list of column names to substitute into tables for display.}

\item{rctv_lMetric}{\verb{reactive list} A \code{\link[shiny:reactive]{shiny::reactive()}} object that returns
a named list of data describing a single metric, as well as things like
which group is selected.}

\item{rctv_lglState}{\verb{reactive logical} A \code{\link[shiny:reactive]{shiny::reactive()}}] object that
returns a Boolean value indicating whether something is "off" (\code{FALSE}) or
"on" (\code{TRUE}).}

\item{rctv_strDomainID}{\verb{reactive character} A \code{\link[shiny:reactive]{shiny::reactive()}} object
that returns the selected \code{DomainID} (such as "AE" or "SUBJ").}

\item{rctv_strDomainHash}{\verb{reactive character} A \code{\link[shiny:reactive]{shiny::reactive()}} object
that returns the the \code{\link[rlang:hash]{rlang::hash()}} of a domain dataframe.}

\item{rctv_strCurrentTab}{\verb{reactive character} A \code{\link[shiny:reactive]{shiny::reactive()}} object
that returns the currently selected tab.}

\item{rctv_strGroupID}{\verb{reactive character} A \code{\link[shiny:reactiveVal]{shiny::reactiveVal()}} object
that returns the \code{GroupID} of the selected group (usually site), and can be
used to update which group is selected.}

\item{rctv_strGroupLevel}{\verb{reactive character} A \code{\link[shiny:reactiveVal]{shiny::reactiveVal()}}
object that returns the selected \code{GroupLevel}.}

\item{rctv_strGroupSubset}{\verb{reactive character} A \code{\link[shiny:reactive]{shiny::reactive()}} object
that returns the selected subset of groups to include in the table.}

\item{rctv_strInput}{\verb{reactive character} A \code{\link[shiny:reactive]{shiny::reactive()}} object that
returns the value(s) of an input to share with an interactive gt table. If
this argument is a \code{\link[shiny:reactiveVal]{shiny::reactiveVal()}}, it will be used to push updates
back to the calling function.}

\item{rctv_strMetricID}{\verb{reactive character} A \code{\link[shiny:reactive]{shiny::reactive()}} object
that returns the selected \code{MetricID}.}

\item{rctv_strName}{\verb{reactive character} A \code{\link[shiny:reactive]{shiny::reactive()}} object that
returns the name of an object, such as a particular dataframe in a named
list.}

\item{rctv_strSubjectID}{\verb{reactive character} A \code{\link[shiny:reactive]{shiny::reactive()}} object
that returns the \code{SubjectID} of the selected participant.}

\item{rctv_strValue}{\verb{reactive character} A \code{\link[shiny:reactive]{shiny::reactive()}} object that
returns the value of a field.}

\item{session}{\code{environment} Session from which to make a child scope (the
default should almost always be used).}

\item{strArg}{\code{character} The name of the argument in the calling function.
In general, this value should either be left as the default, or passed from
the calling function if the calling function also has a \code{strArg} argument.}

\item{strClass}{\code{character} A descriptive label for this type of error, in
lower_snake_case.}

\item{strColorFamily}{\code{character} Whether to load the \code{"dark"} version of
this color, or the \code{"light"} version. Default: \code{"dark"}.}

\item{strColorName}{\code{character} The target color to report about.}

\item{strColorCode}{\code{character} The hex code (such as \code{"#FFFFFF"}) for a
color.}

\item{strContainerID}{\code{character} The (namespaced) ID of the target container
(usually a div).}

\item{strDomainID}{\code{character} The domain data.frame to load.}

\item{strDomainLabel}{\code{character} The domain name to display. For example,
for ID \code{"AE"}, the label is \code{"Adverse Events"}.}

\item{strEmpty}{\code{character} The value to return when everything is
deselected.}

\item{strFavicon}{\code{character} The name of an icon to use in the browser tab
via \code{\link[favawesome:fav]{favawesome::fav()}}.}

\item{strFaviconColor}{\code{character} The hexcode or name of a color to use as
the icon fill for \code{\link[favawesome:fav]{favawesome::fav()}}.}

\item{strFunction}{\code{character} The name of a function, with or without
namespace ("reactive" or "shiny::reactive"). If a namespace is supplied, we
check that the package is installed, and attach it. The function can also
be supplied as a function or a purrr-style formula. See
\code{\link[rlang:as_function]{rlang::as_function()}} (the \code{x} argument) for more details.}

\item{strGroupLabelKey}{\code{character} Value for the group label key. Default:
\code{"InvestigatorLastName"}.}

\item{strGroupLevel}{\code{character} Value for the group level. Default: \code{NULL}
and taken from \code{dfMetrics$GroupLevel} if available.}

\item{strGroupSubset}{\code{character} Subset of groups to include in the table.
Default: \code{"red"}. Options:
\itemize{
\item \code{"all"}: All groups.
\item \code{"red"}: Groups with 1+ red flags.
\item \code{"red/amber"}: Groups with 1+ red/amber flag.
\item \code{"amber"}: Groups with 1+ amber flag.
}}

\item{strInputID}{\code{character} An ID to use for the Shiny input created by
this module or used by this JavaScript.}

\item{strInputName}{\code{character} The name of an input. One of \code{"group"},
\code{"level"}, \code{"participant"}, or \code{"domain"}.}

\item{strLabel}{\code{character} The label of a field.}

\item{strMetricID}{\code{character} A \code{MetricID} to focus on.}

\item{strOutcome}{\code{character} Outcome variable. Default: \code{"Score"}.}

\item{strPlotTitle}{\code{character} A title for a plot, usually the name of a
metric.}

\item{strGroupID}{\code{character} A \code{GroupID} of an individual site or other
group within a study.}

\item{strSubjectID}{\code{character} A \code{SubjectID} of an individual participant.}

\item{strTargetTab}{\code{character} The tab to switch to.}

\item{strText}{\code{character} Text to display.}

\item{strTitle}{\code{character} A title to display for the overall app.}

\item{strValue}{\code{character} The value of a field.}

\item{strWhat}{\code{character} A sentence-case description of the object being
inspected.}

\item{strWidgetName}{\code{character} The name of a widget in the gsm package.}

\item{tagListExtra}{\code{taglist} An optional \code{\link[htmltools:tagList]{htmltools::tagList()}} of
additional elements to add to the top of the app.}

\item{x}{An object to validate.}
}
\description{
Reused parameter definitions are gathered here for easier usage. Note: We
intentionally use \code{id} rather than the more standardized \code{strID} throughout
this package, because \code{\link[shiny:testServer]{shiny::testServer()}} specifically expects an \code{id}
argument in module server functions.
}
\keyword{internal}
