name: Deploy Repo to shinyapps.io
on:
  push:
    branches: [dev, main]
    paths-ignore:
      - 'README.md'
  pull_request:
    branches: [dev, main]
    paths-ignore:
      - 'README.md'
  workflow_dispatch:
    inputs:
      target-deployment:
        description: 'Select the target shinyapps deployment type'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
          - pr

jobs:
  shinyapps-deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Extract repository name
        run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      - name: Set DEPLOYMENT_TYPE for workflow_dispatch
        if: github.event_name == 'workflow_dispatch'
        run: echo "DEPLOYMENT_TYPE=${{ github.event.inputs.target-deployment }}" >> $GITHUB_ENV

      - name: Set DEPLOYMENT_TYPE for pull requests
        if: github.event_name == 'pull_request'
        run: |
          echo "DEPLOYMENT_TYPE=pr" >> $GITHUB_ENV
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV

      - name: Set DEPLOYMENT_TYPE for pushes to dev
        if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
        run: echo "DEPLOYMENT_TYPE=dev" >> $GITHUB_ENV

      - name: Set DEPLOYMENT_TYPE for pushes to main
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: echo "DEPLOYMENT_TYPE=prod" >> $GITHUB_ENV

      - uses: actions/checkout@v4

      - name: Remove files for shinyapps to not see
        run: |
          rm -rf .github data-raw tests
          rm -f _pkgdown.yml .gitignore principles.md
      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true
          r-version: 'oldrel'

      # Use a cache to speed up installation, if possible. Packages will be
      # restored if they're in the cache, then updated if necessary in the
      # following step, then re-cached at the end of the run.
      - name: Use R package cache
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/Library
          key: ${{ runner.os }}-R-${{ hashFiles('DESCRIPTION') }}

      - name: Install packages
        run: |
          install.packages("pak")
          extras <- c(
            "pkgload",
            "pkgdown",
            "AsioHeaders",
            "cpp11",
            "progress"
          )
          remove.packages(intersect(extras, rownames(installed.packages())))
          pak::pak(extras)
          # Make sure everything is up-to-date.
          pak::pak()

          # Install plugin dependencies. Technically this plugin doesn't have
          # any, but keep this in place as an example.
          pkgload::load_all(".", export_all = FALSE, attach_testthat = FALSE)
          subjPlugin <- plugin_Read(
            system.file("plugins", "ParticipantProfile", package = "gsm.app")
          )
          plugin_InstallDependencySources(subjPlugin)

          # Manually install rsconnect to deploy.
          pak::pak("rsconnect")
        shell: Rscript {0}

      - name: Set APPNAME
        run: |
          appname <- gsub("[^A-Za-z0-9]", "-", Sys.getenv("REPO_NAME"))
          favicon <- "angles-up"
          deployment_type <- Sys.getenv("DEPLOYMENT_TYPE")
          pr_number <- Sys.getenv("PR_NUMBER")

          if (deployment_type != "prod") {
            pkgload::load_all(".", export_all = FALSE, attach_testthat = FALSE)
            appname <- paste(appname, deployment_type, sep = "-")
            favicon <- "angle-up"
            faviconcolor <- ColorScheme("amber")
            if (nzchar(pr_number)) {
              appname <- paste(appname, pr_number, sep = "-")
              favicon <- "code-pull-request"
              faviconcolor <- ColorScheme("gray")
            }
            cat("FAVICON=", favicon, "\n", sep = "", file = Sys.getenv("GITHUB_ENV"), append = TRUE)
            cat("FAVICONCOLOR=", faviconcolor, "\n", sep = "", file = Sys.getenv("GITHUB_ENV"), append = TRUE)
          }
          cat("APPNAME=", appname, "\n", sep = "", file = Sys.getenv("GITHUB_ENV"), append = TRUE)
        shell: Rscript {0}

      - name: Set up .Renviron
        run: |
          echo "GSMAPP_FAVICON=$FAVICON" >> .Renviron
          echo "GSMAPP_FAVICONCOLOR=$FAVICONCOLOR" >> .Renviron
          echo "GITHUB_PAT=$GITHUB_PAT" >> .Renviron

      - name: Push to shinyapps.io
        env:
          SHINYAPPSIO_TOKEN: ${{ secrets.SHINYAPPSIO_TOKEN }}
          SHINYAPPSIO_SECRET: ${{ secrets.SHINYAPPSIO_SECRET }}
        run: |
          appname <- Sys.getenv("APPNAME")
          rsconnect::setAccountInfo(
            name = "openrbqm",
            token = Sys.getenv("SHINYAPPSIO_TOKEN"),
            secret = Sys.getenv("SHINYAPPSIO_SECRET")
          )
          rsconnect::deployApp(
            appName = appname,
            forceUpdate = TRUE
          )
        shell: Rscript {0}

      - name: Comment on PR with deployment link
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        uses: actions/github-script@v6
        with:
          script: |
            const appUrl = `https://openrbqm.shinyapps.io/${process.env.APPNAME}`;
            const comment = `ðŸš€ Deployed App: [${appUrl}](${appUrl})`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment,
            });
